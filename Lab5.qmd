---
title: "Statistics 506- Problem Set #5"
author: "Garrett Pinkston"
format: pdf
editor: visual
---

## **Link to GitHub**

github: https://github.com/garrettpinkston2015/Computational-Methods

## **Problem 1 - OOP Programming**

Create a class to represent rational numbers (numbers of the form \frac{a}{b} for integers $a$ and $b$. Do this using S4.


**a)** For the rational class, define the following:

```{r}
setClass(
  "Rational",
  slots = list(
    numerator = "numeric",
    denominator = "numeric"
  ),
  validity = function(object) {
    if (object@denominator == 0) {
      return("Denominator cannot be zero.")
    }
    TRUE
  }
)
```

1) A constructor

```{r}
Rational <- function(numerator, denominator = 1) {
  new("Rational", numerator = numerator, denominator = denominator)
}
```
2) A validator that ensures the denominator is non-zero. (Defined above in class)

3) A show method.
```{r}
setMethod(
  "show",
  "Rational",
  function(object) {
    cat(sprintf("%d/%d\n", object@numerator, object@denominator))
  }
)
```

4) A simplify method, to obtain the simplest form (e.g. simplify(2/4) produces 1/2).

```{r}
library(Rcpp)

cppFunction('
int gcd(int a, int b) {
  if (b == 0) return abs(a);
  return gcd(b, a % b);
}
')

setGeneric("simplify", function(x) standardGeneric("simplify"))

setMethod(
  "simplify",
  "Rational",
  function(x) {
    g <- gcd(x@numerator, x@denominator)
    Rational(x@numerator / g, x@denominator / g)
  }
)
```

5) A quotient method (e.g. quotient(3/7) produces .42857143...). It should support a digits argument but only in the printing, not the returned result (Hint: what does print return?).

```{r}
setGeneric("quotient", function(x, digits = 7) standardGeneric("quotient"))

setMethod(
  "quotient",
  "Rational",
  function(x, digits = 7) {
    result <- x@numerator / x@denominator
    print(round(result, digits = digits))
    result
  }
)
```

6) Addition, subtraction, multiplication, division. These should all return a rational.

```{r}
setGeneric("add", function(x, y) standardGeneric("add"))

setMethod(
  "add",
  c("Rational", "Rational"),
  function(x, y) {
    lcm_den <- lcm(x@denominator, y@denominator)
    new_numerator <- x@numerator * (lcm_den / x@denominator) +
                     y@numerator * (lcm_den / y@denominator)
    simplify(Rational(new_numerator, lcm_den))
  }
)
```
```{r}
setGeneric("subtract", function(x, y) standardGeneric("subtract"))

setMethod(
  "subtract",
  c("Rational", "Rational"),
  function(x, y) {
    lcm_den <- lcm(x@denominator, y@denominator)
    new_numerator <- x@numerator * (lcm_den / x@denominator) -
                     y@numerator * (lcm_den / y@denominator)
    simplify(Rational(new_numerator, lcm_den))
  }
)
```

```{r}
setGeneric("multiply", function(x, y) standardGeneric("multiply"))

setMethod(
  "multiply",
  c("Rational", "Rational"),
  function(x, y) {
    simplify(Rational(x@numerator * y@numerator, x@denominator * y@denominator))
  }
)
```

```{r}
setGeneric("divide", function(x, y) standardGeneric("divide"))

setMethod(
  "divide",
  c("Rational", "Rational"),
  function(x, y) {
    if (y@numerator == 0) stop("Division by zero is not allowed.")
    simplify(Rational(x@numerator * y@denominator, x@denominator * y@numerator))
  }
)
```
7) You’ll (probably) need GCD and LCM as part of some of these calculations; include these functions using Rcpp. Even if you don’t need these functions for another calculation, include them. 


```{r}
r1 <- Rational(24, 6)
r2 <- Rational(7, 230)
r3 <- Rational(0, 4)

# Show the objects
r1
r2
r3

# Simplify each object to verify functionality
simplify(r1)
simplify(r2)
simplify(r3)

# Check the quotient of each
quotient(r1)
quotient(r2)
quotient(r3)
```
