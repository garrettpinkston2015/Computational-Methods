---
title: "Statistics 506- Problem Set #4"
author: "Garrett Pinkston"
format: pdf
editor: visual
---

## **Link to GitHub**

github: https://github.com/garrettpinkston2015/Computational-Methods

## **Problem 1 - Tidyverse**

Install and load the package nycflights13.
```{r}
library(nycflights13)
nycflights13::planes
```

**a)** Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

Additionally,

- Order both tables in descending mean delay.
- Both tables should use the airport names not the airport codes.
- Both tables should print all rows.

```{r}
library(dplyr)
options(tibble.print_max = Inf)


depStats <- flights %>%
  group_by(dest) %>%
  filter(n() >= 10) %>%  
  summarise(
    mean_dep_delay = mean(dep_delay, na.rm = TRUE),
    median_dep_delay = median(dep_delay, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  left_join(airports, by = c("dest" = "faa")) %>% 
  select(name, mean_dep_delay, median_dep_delay) %>%
  arrange(desc(mean_dep_delay))

print(depStats)

```

```{r}
arrivalStats <- flights %>%
  group_by(dest) %>%
  filter(n() >= 10) %>%  
  summarise(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    median_arr_delay = median(arr_delay, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  left_join(airports, by = c("dest" = "faa")) %>%  
  select(name, mean_arr_delay, median_arr_delay) %>%
  arrange(desc(mean_arr_delay)) 

print(arrivalStats)
```


**b)** How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entires for the model, average speed (in MPH) and number of flights.

```{r}
flight

flights_planes <- flights %>%
  left_join(planes, by = "tailnum")

flights_speeds <- flights_planes %>%
  filter(!is.na(air_time), !is.na(distance), !is.na(model)) %>%
  mutate(speed_mph = distance / (air_time / 60))

model_speeds <- flights_speeds %>%
  group_by(model) %>%
  summarise(
    avg_speed_mph = mean(speed_mph, na.rm = TRUE),
    num_flights = n()
  ) %>%
  ungroup()


fastest_model <- model_speeds %>%
  filter(avg_speed_mph == max(avg_speed_mph)) %>%
  slice(1)

print(fastest_model)

```

## **Problem 2 - get_temp()**

Load the Chicago NNMAPS data we used in the visualization lectures. Write a function get_temp() that allows a user to request the average temperature for a given month. The arguments should be:

- month: Month, either a numeric 1-12 or a string.
- year: A numeric year.
- data: The data set to obtain data from.
- celsius: Logically indicating whther the results should be in celsius. Default FALSE.
- average_fn: A function with which to compute the mean. Default is mean.
- The output should be a numeric vector of length 1. The code inside the function should, as with the rest of this    problem, use the tidyverse. Be sure to sanitize the input.

Prove your code works by evaluating the following. Your code should produce the result, or a reasonable error message.


```{r}
nnmaps <- read.csv("/Users/garrettpinkston/Desktop/Michigan/STAT506/Data/chicago-nmmaps.csv")
```

```{r}
library(dplyr)
library(stringr)

get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {
  if (!is.numeric(year) || length(year) != 1 || ((year > 2000) || (year < 1997))) {
    stop("Year must be provided as a single numeric value between 1997 and 2000.")
  }
  
  if (is.numeric(month)) {
    if (month < 1 || month > 12) {
      stop("Month must be a number between 1 and 12.")
    }
    month_type <- "numeric"
  } else if (is.character(month)) {
    month <- str_sub(str_to_lower(month), 1, 3)
    month_type <- "string"
  } else {
    stop("Month must be either a numeric (1-12) or a string (e.g., 'Jan', 'February').")
  }
  
  if (month_type == "numeric") {
    result <- data %>%
      filter(year == !!year, month_numeric == !!month) %>%
      summarize(avg_temp = average_fn(temp, na.rm = TRUE))
  } else {
    result <- data %>%
      filter(year == !!year, str_sub(str_to_lower(.$month), 1, 3) == !!month) %>%
      summarize(avg_temp = average_fn(temp))
  }
  
  if (nrow(result) == 0) {
    stop("No matching data for the specified month and year.")
  }
  
  avg_temp <- result$avg_temp
  if (celsius) {
    avg_temp <- (avg_temp - 32) * (5/9)
  }
  
  return(avg_temp)
}


```

```{r}
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
get_temp(13, 1998, data = nnmaps)
get_temp(2, 2005, data = nnmaps)
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })

```

## **Problem 3 - Visualization**

- Is there a change in the sales price in USD over time?
- Does the distribution of genre of sales across years appear to change?
- How does the genre affect the change in sales price over time?







